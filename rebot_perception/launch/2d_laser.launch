<?xml version="1.0"?>
<!--
Copyright (c) 2020, STEREOLABS.

All rights reserved.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
    <!-- <include file="$(find xacro)/xacro.py $(find rebot_description)/urdf/rebot.xacro"/> -->
    <!-- Camera Model and Name -->
    <arg name="camera_name"           default="zed2i" /> <!-- The name you want -->
    <arg name="camera_model"          default="zed2i" /> <!-- 'zed' or 'zedm' or 'zed2' -->
    <arg name="zed_nodelet_name"         default="zed_nodelet" />
    <!-- Load SVO file -->
    <arg name="svo_file"              default="" /><!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
    <!-- Remote stream -->
    <arg name="stream"                default="" /> <!-- <arg name="stream" default="<ip_address>:<port>"> -->
    <arg name="publish_tf"            default="true" />
    <arg name="odometry_frame"        default="odom" />
    <arg name="camera_frame"          default="zed_left_camera" />
    <arg name="depth_frame"           default="zed_depth_camera" />
    <arg name="zed_id"                default="0" />
    <!-- Base frame -->
    <arg name="base_frame"            default="robot_footprint" />

    <!-- Publish ZED urdf -->
    <arg name="publish_urdf"          default="true" />

    <arg name="camera_id"             default="0" />
    <arg name="gpu_id"                default="-1" />

    <!-- Position respect to base frame (i.e. "base_frame) -->
    <arg name="cam_pos_x"             default="0.0" />
    <arg name="cam_pos_y"             default="0.0" />
    <arg name="cam_pos_z"             default="0.0" />

    <!-- Orientation respect to base frame (i.e. "base_frame) -->
    <arg name="cam_roll"              default="0.0" />
    <arg name="cam_pitch"             default="0.0" />
    <arg name="cam_yaw"               default="0.0" />
    <!-- Name of the Nodelet Manager -->
    
    <arg name="nodelet_manager_name"  default="$(arg camera_name)_nodelet_manager" />
    
    <group ns="$(arg camera_name)">
        <!-- Nodelet Manager -->
        <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager_name)"  args="manager" output="screen" />

        <!-- Load ZED wrapper nodelet -->
        <include file="$(find zed_wrapper)/launch/include/zed_camera_nodelet.launch">
            <arg name="nodelet_manager_name"            value="$(arg nodelet_manager_name)" />
            <arg name="camera_name"                     value="$(arg camera_name)" />
            <arg name="svo_file"                        value="$(arg svo_file)" />
            <arg name="stream"                          value="$(arg stream)" />
            <arg name="node_name"                       value="$(arg zed_nodelet_name)" />
            <arg name="camera_model"                    value="$(arg camera_model)" />
            <arg name="base_frame"                      value="$(arg base_frame)" />
            <arg name="publish_urdf"                    value="$(arg publish_urdf)" />
            <arg name="cam_pos_x"                       value="$(arg cam_pos_x)" />
            <arg name="cam_pos_y"                       value="$(arg cam_pos_y)" />
            <arg name="cam_pos_z"                       value="$(arg cam_pos_z)" />
            <arg name="cam_roll"                        value="$(arg cam_roll)" />
            <arg name="cam_pitch"                       value="$(arg cam_pitch)" />
            <arg name="cam_yaw"                         value="$(arg cam_yaw)" />
        </include>
        <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
           <param name="scan_height" value="50"/>
           <param name="output_frame_id" value="/zed2i_left_camera_frame"/>
           <param name="range_min" value="0.1"/>
           <param name="range_max" value="8"/>
           <remap from="image" to="$(arg zed_nodelet_name)/depth/depth_registered"/>
           <remap from="scan" to ="/scan"/>

        </node>
        
    </group>
    <node pkg="tf" type="static_transform_publisher" name="z_to_zed2_base" args="0 0 0 0 0 0 1 ZED2i zed2i_base_link 100" />
    <node pkg="tf" type="static_transform_publisher" name="footprint_to_baselink" args="0 0 0 0 0 0 1 robot_footprint base_link 100" />
    <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_baselink" args="0 0 0 0 0 0 1 odom robot_footprint 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="zed2baselink_to_laser" args="0 0 0 0 0 0 1 zed2_base_link zed_initial_frame 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_laser" args="0 0 0 0 0 0 1 zed_initial_frame  odom 100" />  -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_zed_center" args="0 0 0.3 0 0 0 1 map zed_center 100" /> --> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="0 0 0 0 0 0 1 odom base_link 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="base_to_camera" args="0 0 0.3 0 0 0 1 base_link zed_base_link 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="z_to_camera" args="0 0 0.3 0 0 0 1 zed_initial_frame zed2_camera_center 100" /> -->
    <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher_node" output="screen">

          <param name="fixed_frame" value = "base_link"/>
          <param name="base_frame" value="base_link"/>
          <param name="use_alpha_beta" value="false"/>
          <param name="use_odom" value="true"/>
          <param name="use_imu" value="true"/>
          <param name="max_iterations" value="10"/>
          <param name="publish_pose" value="true"/>
          <param name="publish_tf" value="true"/>
          <param name="use_vel" value="true"/>
    </node>
    
    
</launch>
